{"posts":[{"title":"Mood | Brand New Start","text":"写一些废话在前面： 好久没有写博客了，也很久没有更新个人博客。之前这个站点的内容已经找不到了（大多数是关于深度学习和目标检测的，还有本科做的一些Toy-Project），索性从头配置，把之前的内容全部删除掉了，也算是一个新的开始。 这个博客主题是ICARUS赛博朋克版本，决定以后一直用下去了。我笔记本的桌面也是一张赛博朋克风的图，用了很久。最初选择计算机专业，是因为高中时在Coursera自学过前端的课程，当时觉得好有趣，而且我从小就喜欢打游戏;)。后来接触AI，心中便种下了一颗赛博朋克梦，又回到了Coursera，从吴恩达老师的经典《Deep Learning》学起，时常觉得和CS这个学科在冥冥之中有着不解之缘。 虽然大学四年在学业上取得了不错的成绩（刚入学的我数学垫底，及格都会眉飞色舞的开心好一阵，到最后专业第三，还保研到了复旦），可CS毕竟是一门实践学科，四年光阴拿去卷成绩、参加社团活动、各地旅行、认识有趣的人，也算是过的快乐且丰富多彩，但技术上的长进确实不多，背负科班的名号还是有些惭愧的，而成为技术大牛需要夜以继日的持续努力和实践。 22岁，读了研究生，开始认真思考未来的职业规划。 是做一些开源项目，背八股刷leetcode，去面试前端后端？（虽然业务场景广泛，绩效清晰，但前端容易被替代，后端技术繁琐，还是要看业务线，以及需求来做事，最终成为螺丝钉，在国内还有裁员风险。） 是赶快水两篇文章，背八股文刷leetcode，去面试算法工程师？（虽然和研究方向沾边，但已经卷成麻花，且没有什么好的业务能落地，移动互联网红利期结束，AI不再像过去一样能圈很多钱，面向落地和前后端没区别，面向算法的炼丹师能让人焦虑的要死，一个月没什么指标提升就可以考虑如何体面的离职了） 是疯狂水文章，读博士，然后再去工业界/学术界呢？ 是在国内卷，还是润出去呢？ 是直接躺平去央企国企银行，考公务员呢？还是继续在大厂卷技术产品经理？ …… 你看，成长最讨厌的，就是把我们变成现实、唯结果论、喜欢分析利弊的大人。在这个极度内卷的时代，这是生存下去的必要品质，但上述所提到的也不过是一些同质化竞争。我们焦虑，我们张口闭口提八股文leetcode、CCF-A论文×N、50w的package、大厂实习和转正，好像这些是衡量人生成功与否唯一的标志，早就把热爱二字抛到九霄云外了，这里的热爱可不是“为的就是这块技术“，现实主义和理想主义从来都不是二选一问题。人变老的标志不是年龄的增长，而是现实消磨掉了你原本拥有的理想主义。 最后再引两段我很喜欢的话，作为过去的结束语，以及未来的开场白： “那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。“ “回头看他人生的故事的时候，我们或许觉得传奇精彩，可是带入来看却会发现他在面临每一个人生岔路口时，做出的每一个决定需要付出多大的勇气。都说人生任何时候开始都不晚，或许前提是那个人背负着巨大的足以支撑其走到最后的信念和梦想。毕竟人生区区百年，只争朝夕。“ 2023.02.07 于广州。 更新想法。 任何技术（前端/后端/算法/数据库/网安/操作系统）都可以深挖，都需要持续不断的学习，才不会被日新月异的技术洪流淘汰掉。找到自己感兴趣的就好。 以及， Try first. 任何新鲜事物都先试试看。 大凡事物必有顺序。 看得太超前了不行，看得太超前，势必忽视脚下，人往往跌倒。 可另一方面，光看脚下也不行，不知道前面你会撞上什么。 所以，要在适度往前看的同时，按部就班处理眼下事物。这点至为关键，无论做什么。 ——《海边的卡夫卡》 2023.02.08 于广州。 更新想法。 昨天晚上的飞机，终于回到了上海。 今天收拾了一下行李，晚上骑着我的可爱电瓶车就来实验室了（感觉车好像坏掉了，明天一定要记得去修啊！），呆在实验室心情开心的爆表了！我真是骨子里的工作狂…（也不是啦，天天在家躺着就觉得好丧，如果不做些自己觉得有意义的事情，就会觉得出去玩也不快乐…） 昨晚躺床上，和舍友聊职业规划、未来blahblah的。 舍友：chatgpt出来，还是觉得后端更容易被代替（因为我说前端更容易被替代），虽然也有难的技术部分（比如处理高并发场景，还有许多涉及复杂算法的场景），但大多数情况下，日常工作中就是增删改查crud。前端可能会好点，因为需要人觉得美观，而且科班出来一般都是做后端，竞争更激烈。（but我觉得前端就是拿产品+设计给的图，照着敲罢了…因为之前试着做过一段前端的工作，其实美观不美观是设计需要处理的，设计没准在不远的将来也会被代替了，更别说前端了。） 舍友：居然是nlp先出现了这种模型，那cv呢？（我：我觉得可能cv要做这种多任务大预训练太费算力了。。所以目前没有人那么有钱敢这么做的哈哈哈哈。不过我估计未来都是大模型的天下（算力、数据方面）了。要么就是等一个真正的底层颠覆性的DL算法创新（算法方面）） 最后我俩总结，【如果想搞钱的话】（这是前提，今天刷到一句话，”Ta聊起研究方向时能够滔滔不绝，Ta眼里闪闪发光，说读博的目的是为了尝试突破某个方向的科研桎梏“。我想，这才是一个真正的博士该有的品质吧，也蛮像我自己理想中的生活的。其实感觉自己还是蛮有科研激情的，不过自己的性格是真的坐不住静不下来） 前后端等等容易被代替（聊了一下chatgpt、以及微软和openai合作的GitHub Copilot辅助写代码很好用）。pass掉做软件产品、工程向。 算法研究岗要读个博士，预计未来DL都是大模型的天下，高校也没有算力支撑做这些事情，除非和企业合作。pass掉工业/学术界科研向。 硕士出去肯定做不了research。算法工程落地写python c++，处理数据。勉强能冲着看。但要是炼丹提指标是kpi，那可能也不是很友好。 搞一搞AI+金融（我俩对金融都有点兴趣），找个类似私募的单位做点东西。我觉得这条路还挺有意思的。但是转纯金融是不可能的，马太效应最明显的一个行业。 最简单的还是去找一些工作几年了的前辈聊一聊，感觉会少走很多的弯路。而且我觉得写代码只是程序员、研究员工作中最基础的一个环节，其实也没必要过于悲观。而且从商业角度看，软件技术，主要靠一个商业模式，要有一个好的故事，要有用户肯买账才行。 今天又是没想清楚未来该何去何从的一天呢！ 不过能够肯定的是，以后一定要做计算机/金融这俩方向的。 先把手头的事情做好，船到桥头自然直~ 2023.02.13 于上海。","link":"/2023/02/07/2302072144/"},{"title":"Util | ChatGPT使用体验以及重拾Hexo遇到的坑","text":"ChatGPT注册 用Microsoft Edge、Google Chrome浏览器。 美区的VPN，开全局模式。 ChatGPT: Optimizing Language Models for Dialogue (openai.com)👉TRY CHATGPT Button。 如遇到ChatGPT is at capacity right now问题，多刷新几次页面就能进去。 利用Google账号直接登录。 利用SMS-Activate，下载桌面版软件（网页版做的太烂了），充值0.2刀（支持支付宝），买一个印度区的openai短信服务（最便宜），就可以完成注册了。 如遇到We're experiencing exceptionally high demand. Please hang tight as we work on scaling our systems.，Too many requests in 1 hour. Try again later.问题 换梯子、换浏览器，清除cookie和其他站点数据（短时间能解决问题） 花钱买api接口调用（不过马上就要上线付费版的chatgpt pro了？） 尽量白天使用，晚上别用（用的人太多了，尤其是美国娃，别抢了） 实在不行淘宝等平台买新号用吧。 ChatGPT使用体验 最初试用ChatGPT时，仅仅让它续写故事，做内容生成。发现是在一本正经的胡说八道，于是就没有再继续使用了。 后来才发现是使用的方法不对。具体可以参考f/awesome-chatgpt-prompts: This repo includes ChatGPT prompt curation to use ChatGPT better. (github.com)，里面涉及了ChatGPT可以完成的许多内容。 最近看微软将ChatGPT集成到Bing搜索，以及谷歌等巨头公司做出的一系列举动，发现ChatGPT开启了新的交互式搜索范式，这是让剩下的搜索引擎巨头倍感焦虑的问题。 关于ChatGPT的编码能力，我觉得很适合辅助入门者进行代码的学习，但是复杂一点的问题它就没办法解决了。 不管是用YouTube、Google、StackOverflow、GitHub，还是ChatGPT辅助编码，问问题的能力永远比答案更重要，所以搜索引擎是一种工具。这些工具的诞生能够将简单的、重复性的工作解决掉，所以不愿意终身学习的躺平er们要小心了，在不久的将来，可能就要被代替掉了。 Hexo插入图片遇到的坑参考 hexo3 - hexo图片路径问题 - SegmentFault 思否 域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg · Issue #47 · xcodebuild/hexo-asset-image (github.com) 直接卸载hexo-asset-image插件 1npm uninstall hexo-asset-image --save 将_config.yml中 1post_asset_folder: true md文件中引用格式为 1![](同名文章assetfoldername/imagename.png) 基于Icarus的一些个人博客： about - improveNPC的日志 (wxk.me) legendsmb Hexo Icarus主题配置完全手册 | 小贪心 (littlezero.top) 旺阳 (lqwang.net) 学习文档 文档 | Hexo Categories - Icarus (ppoffice.github.io) ppoffice/hexo-theme-icarus: A simple, delicate, and modern theme for the static site generator Hexo. (github.com)","link":"/2023/02/07/2302072205/"},{"title":"Util | Github教育认证以及Copilot使用","text":"下午浪费了一点时间踩坑，希望能够帮助到其他需要教育认证的朋友们~ Github教育认证 不要挂梯子，直接用Microsoft Edge打开GitHub Education，进行后续验证。 学信网下载学籍报告，用DeepL文档翻译把报告翻译成英文版，截图保存为jpg格式。 直接上传图像，proof选择Other，填Ministry of Education Online Verification Report of Student Status 刚开始上传会提示profile问题、没有valid date问题等。我还把Github profile重新改了一遍，但这不是问题的关键。主要问题还是上传的学籍报告不是英文版or不清晰，之前用的是Google的文档翻译，翻译出来的字很小，再转成JPEG压缩了一下很模糊。 Copilot使用 有了教育认证，就可以免费用GitHub Copilot · Your AI pair programmer啦。每个月省了10刀~ 在pycharm中添加插件即可。 123写注释，copilot会自动补全相应的注释和代码。- tab键应用suggestion（将自动补全的代码，或者根据注释补全的代码应用）- alt+[或alt+]可以查看其他的suggestion 再安利两个我超级喜欢的插件 12一个是Indent Rainbow，彩虹缩进🌈，写python超级好用啊！另外一个是Monokai Pro Theme，我最喜欢的代码配色就是Monokai了！ 使用体验： 和ChatGPT相比，Copilot可能更方便辅助日常中的代码构建（尤其是常写的代码，Copilot可以直接内嵌在IDE中，补全代码），可以提高程序员的编码效率~ 但是如果要解决实际场景下的编程问题，而不是一些基础的Leetcode算法题或者教学Case，ChatGPT和Copilot都只是一种辅助工具 距离取代程序员还有很远的距离呢~","link":"/2023/02/15/2302151930/"},{"title":"Paper | SFI-Swin Symmetric Face Inpainting with Swin Transformer by Distinctly Learning Face Components Distributions","text":"Info Title：SFI-Swin: Symmetric Face Inpainting with Swin Transformer by Distinctly Learning Face Components Distributions Keyword：Face Inpainting、Swin Transformer Idea：Symmetric（对称的，人脸对称性）、Distinctly Learning Face Components Distributions（显式学习面部组件分布） Source Paper，2023年1月9号Submitted到arxiv上的。[2301.03130] SFI-Swin: Symmetric Face Inpainting with Swin Transformer by Distinctly Learning Face Components Distributions (arxiv.org) Code，Repo给出了但是代码还没有push上来。mohammadrezanaderi4/SFI-Swin: SFI-Swin: Symmetric Face Inpainting with Swin Transformer by Distinctly Learning Face Components Distributions https://arxiv.org/abs/2301.03130 (github.com) 日常感叹，为什么我能想到的Idea别人总能如此之快的抢发。当我还在拖拖拉拉实现Idea，别人已经验证完了。要多读paper，更重要的是多写code，实现Idea并验证哇。世界上最遥远的距离就是知道和做到。 Abstract现存的问题（问题陈述）： None of the existing inpainting methods consider the symmetry and homogeneity of the picture. 现有的方法在人脸修复的过程中没有考虑图像的对称性和同质性。 The metrics that assess a repaired face image quality cannot measure the preservation of symmetry between the rebuilt and existing parts of a face. 现有的评估指标无法衡量修复人脸的对称性。 提出的方法（贡献点）： 利用多discriminators分别验证五官的生成质量（提升对人脸高级语义五官的理解），构建一个transformer-based的网络（大感受野能够保证面部对称性）。 提出symmetry concentration score指标，来评估修复人脸的对称性。 在reality, symmetry, and homogeneity三个维度上，比最近提出的sota算法效果好。 Introduction 在图像处理中，同质性指的是测量图像的局部均匀性。 文章中的同质性指的是修复的缺失区域需要和面部的其他区域保持协调（global features of each part of the face）。The inpainted regions must be homogeneous with the other parts of the face and highly correlated to the available surrounding areas of the input image. 对称性指的是面部的左右对称。facial symmetry must be preserved between the left and right sides. 作者认为现存方法的问题出在了损失函数无法向生成器传达面部特征的整体理解。This shortcoming is because the network losses do not convey a general understanding of the facial features to the generator. 于是作者分析了主流Inpainting方法常用的几种loss对于模型训练的影响，包括pixel-wise, adversarial, feature-matching, and perceptual loss。 pixel-wise loss。L1、L2范数，只能让网络理解到底层特征（low-level features）。👉focus on 底层特征（颜色、纹理） adversarial loss。能够让gt和生成图像的分布（distribution）接近，使用discriminator和generator构成博弈；feature-matching loss。gt和pred作为输入，提取discriminator中间层特征。这两个loss只能让生成的图片看起来真实，但不能保证missing regions exactly similar to ground truth（inpainting任务的不适定性，ill-posed problem），大多数鉴别器是patch-based的，所以只能保证局部真实感。👉focus on 生成patches内容的真实感 perceptual loss。先利用一个seg network的预训练提取高级语义特征，然后计算L1、L2范数。主要考虑了high-level features，比如边缘。👉focus on 边缘轮廓的平滑性 一般是过一个类似VGG的backbone预训练提取特征，high-level features就默认为语义及以上层次的特征。 有时上述的loss会牺牲面部对称性而达到局部真实感的最优，所以我们现在需要💡homogeneity-aware loss均匀感知损失，来约束模型。同时，transformer的大感受野也能保证面部对称性。 Method Evaluation 方法效果一般，更多的是Swin transformer带来的加成。","link":"/2023/02/23/2302232150/"},{"title":"Backend | 关于Node.js、NPM和Node_modules","text":"是什么首先看了一下Node.js官网的介绍。 As an asynchronous event-driven JavaScript runtime, Node.js is designed to build scalable network applications. 说的都是什么鬼话，一句没看明白。让我们来看看人话是什么样的。 Node.js, which is a run-time environment that includes everything required to execute a program written in JavaScript. Node.js is neither a programming language nor a framework; it’s an environment for them. Node.js是用JavaScript写程序时的一个运行时环境。 NPM is Node.js’s package ecosystem. It is the largest ecosystem of all open-source libraries in the world, with over 1 million packages and growing. NPM is free to use, and thousands of open source developers contribute to it daily. NPM是Node.js的包生态系统，也就是管理package的。这是世界上最大的一个开源库生态，据说每天都会有200多个新的package被注册。 根据项目中的package.json或package-lock.json文件，利用npm install就可以安装项目所有的依赖库，并存储在node_modules下。 与Python库管理的区别 npm vs. pip npm使用的是局部依赖，所以相同的module会被反复安装到每个项目以及每个可传递的依赖项上（ The same module is installed over and over again for every project and every transitive dependency）。一个package可以是一个tar包，也可以是本地file协议，甚至git仓库地址。所以，node_module——HEAVIEST OBJECTS IN THE UNIVERSE。 12345678910node_modules mod-a node_modules mod-b@1.0 mod-c node_modules mod-b@2.0 mod-d node-modules mod-b@2.0 虽然mod-c和mod-b依赖同一个mod-b版本，但是该版本却安装了两遍。如果应用了很多第三方库，同时第三方库依赖了一些很基础的第三方库（如lodash），node_modules里就会充满各种重复版本的lodash。 而pip使用的全局依赖（至少对于虚拟环境而言是全局依赖的），所以就避免了上述问题。 standard library python vs. JS Python的标准库比较大，与JS的标准库相比。 所以JS会依赖更多的packages。 我觉得可以把node.js类比于anaconda，都像环境和容器一样。 ICARUS的npm版本和git版本首先我的blog是基于hexo的。 因为有两个版本可以安装，npm install下来的就是直接到node_modules里，其实就是github repo的一个注册包版本（node_modules/hexo-theme-icarus包含package.json，所以它是一个package而不是一个module？不过我的觉得package和module的区分不重要）。 而git clone安装方法是存在themes文件夹下面。 如果我想修改一些主页的设置，就需要改主题的源代码，但是他是以npm的方式安装的，虽然直接修改也能生效（因为是本地路径查询包，所以直接修改node_modules中的库也是没问题的吧？），但是这种方法十分的不优雅（比如某天重新装了一下node_modules就全G了）。 推荐的方法是利用git clone安装到theme文件下，也就是自己的项目里，然后修改好了闲的没事的话可以注册到npm上，这样别人也能使用你修改后的icarus plus版本了，而且npm直接安装一下，十分的方便。","link":"/2023/02/24/2302241356/"},{"title":"Paper | Resolution-robust Large Mask Inpainting with Fourier Convolutions","text":"Info Title： Resolution-robust Large Mask Inpainting with Fourier Convolutions Keyword：Large Mask Inapinting Idea：Fourier Convolutions Source Paper，2021年9月15日submitted的。最后发表在WACV2022上，确实是Applications of CV，非常实用。后续有很多CVPR2022的高分辨率图像修复任务都和这篇工作做了对比。[2109.07161] Resolution-robust Large Mask Inpainting with Fourier Convolutions (arxiv.org) Code，大分辨率图像修复效果非常好的一项工作，面向落地的。https://github.com/saic-mdal/lama，[Resolution-robust Large Mask Inpainting with Fourier Convolutions (advimman.github.io)](https://advimman.github.io/lama-project/) Vedio，超棒的一个paper讲解，非作者本人，但是邀请了一作来interview。Resolution-robust Large Mask Inpainting with Fourier Convolutions (w/ Author Interview) - YouTube Abstract现存的问题： Modern image inpainting systems, often struggle with large missing areas, complex geometric structures, and high-resolution images. 目前图像修复存在的问题有：大缺失区域（但个人认为ill-posed problem不是傅里叶卷积能够解决的）、复杂几何结构以及高分辨率图像修复。 猜想： 如何解决这个问题？作者认为最主要的原因是lack of an effective receptive field in both the inpainting network and the loss function. 本文LaMa（Large mask inpainting）贡献点： 在网络结构上，使用fast Fourier convolutions的inpainting network architecture，image-wide的感受野（快速傅里叶卷积的贡献）。 在损失函数上，A high receptive field perceptual loss。 在训练策略上，使用Large training mask。 IntroductionA large effective receptive field is essential for understanding the global structure of an image. 第一， high receptive field architecture。文章提出了基于快速傅里叶卷积（FFCs）的网络架构，能够使得网络前几层感受野都能cover整个图像。可以提升perceptual quality并使网络轻量化，而且泛化能力很强（即使训练集不包含的高分辨率图像，也能很好的推理）。 第二， high receptive field loss function。文章提出基于语义分割网络、大感受野的perceptual loss。能够提升全局结构和形状的一致性。 第三，aggressive algorithm of training masks generation。training mask generation，生成更大的mask。 Method大mask配置下，如果依旧利用传统的3×3ResNet卷积核，在网络前期感受野可能位于掩膜内部，所以网络中的许多层都缺乏全局上下文，浪费了计算量和参数。 Add FFC 而Fast Fourier convolution (FFC) 能够让网络前几层应用全局的上下文信息。包含两个并行分支，1）局部分支使用常规的卷积操作；2）全局分支使用real FFT，作用在实数信号上。FFT会转换到复数空间（频域）。而inverse real FFT能够保证输出是实数。 这里简单的real FFT得到的复数实部和虚部concat到了一起，然后在频域上做了一个1×1卷积，也就是同频分量的卷积，这样能保证周期性信号的修复（也就是重复性的pattern，作者最初的motivation就是认为现有的方法对于重复性pattern修复的结果不佳，想到重复pattern就想到了周期性信号，也就使用了FFT来解决这个问题） 提出了一个Fast Fourier Conv Residual Block，也就是res block改成快速傅里叶卷积。FFC还有局部分支和全局分支的交互，作用在每一个层之间。 Perceptual loss pro 在鉴别器部分，使用segmentation model作为backbone来专注于high-level information，而不是classification model backbone，更专注于纹理等低级特征。使用傅里叶或扩张卷积来实现均可。 这里做了消融实验验证了对于perceptual loss升级后的效果。因为生成器更关注于全局信息，所以也要使判别器的性能提升，这样在GAN的训练过程中才能保持平衡。 Generation of large mask 输入的数据对于模型的性能提升很重要。与deepfillv2和narrow mask相比，文章生成large wide mask（多边形宽笔划）和large box mask的组合，作为训练输入。 Evaluation 红色代表本方法比其他方法性能提升的百分比。可以看出在narrow mask配置下，本文方法超过绝大多数method，但是在wide mask配置下，性能吊打其他方法。 使用傅里叶卷积的消融实验，在narrow mask下傅里叶卷积模型的性能提升效果不是很明显，但是大mask配置下优势就很突出。 还可以泛化到高分辨率图像上。","link":"/2023/02/26/2302262250/"}],"tags":[{"name":"NLP","slug":"NLP","link":"/tags/NLP/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"AboutVanessa","slug":"AboutVanessa","link":"/tags/AboutVanessa/"},{"name":"paper","slug":"paper","link":"/tags/paper/"}],"categories":[{"name":"Util","slug":"Util","link":"/categories/Util/"},{"name":"AboutVanessa","slug":"AboutVanessa","link":"/categories/AboutVanessa/"}],"pages":[]}