{"posts":[{"title":"Growth | Brand New Start","text":"写一些废话在前面： 好久没有写博客了，也很久没有更新个人博客。之前这个站点的内容已经找不到了（大多数是关于深度学习和目标检测的，还有本科做的一些Toy-Project），索性从头配置，把之前的内容全部删除掉了，也算是一个新的开始。 这个博客主题是ICARUS赛博朋克版本，决定以后一直用下去了。我笔记本的桌面也是一张赛博朋克风的图，用了很久。最初选择计算机专业，是因为高中时在Coursera自学过前端的课程，当时觉得好有趣，而且我从小就喜欢打游戏;)。后来接触AI，心中便种下了一颗赛博朋克梦，又回到了Coursera，从吴恩达老师的经典《Deep Learning》学起，时常觉得和CS这个学科在冥冥之中有着不解之缘。 虽然大学四年在学业上取得了不错的成绩（刚入学的我数学垫底，及格都会眉飞色舞的开心好一阵，到最后专业第三，还保研到了复旦），可CS毕竟是一门实践学科，四年光阴拿去卷成绩、参加社团活动、各地旅行、认识有趣的人，也算是过的快乐且丰富多彩，但技术上的长进确实不多，背负科班的名号还是有些惭愧的，而成为技术大牛需要夜以继日的持续努力和实践。 22岁，读了研究生，开始认真思考未来的职业规划。 是做一些开源项目，背八股刷leetcode，去面试前端后端？（虽然业务场景广泛，绩效清晰，但前端容易被替代，后端技术繁琐，还是要看业务线，以及需求来做事，最终成为螺丝钉，在国内还有裁员风险。） 是赶快水两篇文章，背八股文刷leetcode，去面试算法工程师？（虽然和研究方向沾边，但已经卷成麻花，且没有什么好的业务能落地，移动互联网红利期结束，AI不再像过去一样能圈很多钱，面向落地和前后端没区别，面向算法的炼丹师能让人焦虑的要死，一个月没什么指标提升就可以考虑如何体面的离职了） 是疯狂水文章，读博士，然后再去工业界/学术界呢？ 是在国内卷，还是润出去呢？ 是直接躺平去央企国企银行，考公务员呢？还是继续在大厂卷技术产品经理？ …… 你看，成长最讨厌的，就是把我们变成现实、唯结果论、喜欢分析利弊的大人。在这个极度内卷的时代，这是生存下去的必要品质，但上述所提到的也不过是一些同质化竞争。我们焦虑，我们张口闭口提八股文leetcode、CCF-A论文×N、50w的package、大厂实习和转正，好像这些是衡量人生成功与否唯一的标志，早就把热爱二字抛到九霄云外了，这里的热爱可不是“为的就是这块技术“，现实主义和理想主义从来都不是二选一问题。人变老的标志不是年龄的增长，而是现实消磨掉了你原本拥有的理想主义。 最后再引两段我很喜欢的话，作为过去的结束语，以及未来的开场白： “那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。“ “回头看他人生的故事的时候，我们或许觉得传奇精彩，可是带入来看却会发现他在面临每一个人生岔路口时，做出的每一个决定需要付出多大的勇气。都说人生任何时候开始都不晚，或许前提是那个人背负着巨大的足以支撑其走到最后的信念和梦想。毕竟人生区区百年，只争朝夕。“ 2023.02.07 于广州。 更新想法。 任何技术（前端/后端/算法/数据库/网安/操作系统）都可以深挖，都需要持续不断的学习，才不会被日新月异的技术洪流淘汰掉。找到自己感兴趣的就好。 以及， Try first. 任何新鲜事物都先试试看。 大凡事物必有顺序。 看得太超前了不行，看得太超前，势必忽视脚下，人往往跌倒。 可另一方面，光看脚下也不行，不知道前面你会撞上什么。 所以，要在适度往前看的同时，按部就班处理眼下事物。这点至为关键，无论做什么。 ——《海边的卡夫卡》 2023.02.08 于广州。 更新想法。 昨天晚上的飞机，终于回到了上海。 今天收拾了一下行李，晚上骑着我的可爱电瓶车就来实验室了（感觉车好像坏掉了，明天一定要记得去修啊！），呆在实验室心情开心的爆表了！我真是骨子里的工作狂…（也不是啦，天天在家躺着就觉得好丧，如果不做些自己觉得有意义的事情，就会觉得出去玩也不快乐…） 昨晚躺床上，和舍友聊职业规划、未来blahblah的。 舍友：chatgpt出来，还是觉得后端更容易被代替（因为我说前端更容易被替代），虽然也有难的技术部分（比如处理高并发场景，还有许多涉及复杂算法的场景），但大多数情况下，日常工作中就是增删改查crud。前端可能会好点，因为需要人觉得美观，而且科班出来一般都是做后端，竞争更激烈。（but我觉得前端就是拿产品+设计给的图，照着敲罢了…因为之前试着做过一段前端的工作，其实美观不美观是设计需要处理的，设计没准在不远的将来也会被代替了，更别说前端了。） 舍友：居然是nlp先出现了这种模型，那cv呢？（我：我觉得可能cv要做这种多任务大预训练太费算力了。。所以目前没有人那么有钱敢这么做的哈哈哈哈。不过我估计未来都是大模型的天下（算力、数据方面）了。要么就是等一个真正的底层颠覆性的DL算法创新（算法方面）） 最后我俩总结，【如果想搞钱的话】（这是前提，今天刷到一句话，”Ta聊起研究方向时能够滔滔不绝，Ta眼里闪闪发光，说读博的目的是为了尝试突破某个方向的科研桎梏“。我想，这才是一个真正的博士该有的品质吧，也蛮像我自己理想中的生活的。其实感觉自己还是蛮有科研激情的，不过自己的性格是真的坐不住静不下来） 前后端等等容易被代替（聊了一下chatgpt、以及微软和openai合作的GitHub Copilot辅助写代码很好用）。pass掉做软件产品、工程向。 算法研究岗要读个博士，预计未来DL都是大模型的天下，高校也没有算力支撑做这些事情，除非和企业合作。pass掉工业/学术界科研向。 硕士出去肯定做不了research。算法工程落地写python c++，处理数据。勉强能冲着看。但要是炼丹提指标是kpi，那可能也不是很友好。 搞一搞AI+金融（我俩对金融都有点兴趣），找个类似私募的单位做点东西。我觉得这条路还挺有意思的。但是转纯金融是不可能的，马太效应最明显的一个行业。 最简单的还是去找一些工作几年了的前辈聊一聊，感觉会少走很多的弯路。而且我觉得写代码只是程序员、研究员工作中最基础的一个环节，其实也没必要过于悲观。而且从商业角度看，软件技术，主要靠一个商业模式，要有一个好的故事，要有用户肯买账才行。 今天又是没想清楚未来该何去何从的一天呢！ 不过能够肯定的是，以后一定要做计算机/金融这俩方向的。 先把手头的事情做好，船到桥头自然直~ 2023.02.13 于上海。","link":"/2023/02/07/2302072144/"},{"title":"Util | ChatGPT使用体验以及重拾Hexo遇到的坑","text":"ChatGPT注册 用Microsoft Edge、Google Chrome浏览器。 美区的VPN，开全局模式。 ChatGPT: Optimizing Language Models for Dialogue (openai.com)👉TRY CHATGPT Button。 如遇到ChatGPT is at capacity right now问题，多刷新几次页面就能进去。 利用Google账号直接登录。 利用SMS-Activate，下载桌面版软件（网页版做的太烂了），充值0.2刀（支持支付宝），买一个印度区的openai短信服务（最便宜），就可以完成注册了。 如遇到We're experiencing exceptionally high demand. Please hang tight as we work on scaling our systems.，Too many requests in 1 hour. Try again later.问题 换梯子、换浏览器，清除cookie和其他站点数据（短时间能解决问题） 花钱买api接口调用（不过马上就要上线付费版的chatgpt pro了？） 尽量白天使用，晚上别用（用的人太多了，尤其是美国娃，别抢了） 实在不行淘宝等平台买新号用吧。 ChatGPT使用体验 最初试用ChatGPT时，仅仅让它续写故事，做内容生成。发现是在一本正经的胡说八道，于是就没有再继续使用了。 后来才发现是使用的方法不对。具体可以参考f/awesome-chatgpt-prompts: This repo includes ChatGPT prompt curation to use ChatGPT better. (github.com)，里面涉及了ChatGPT可以完成的许多内容。 最近看微软将ChatGPT集成到Bing搜索，以及谷歌等巨头公司做出的一系列举动，发现ChatGPT开启了新的交互式搜索范式，这是让剩下的搜索引擎巨头倍感焦虑的问题。 关于ChatGPT的编码能力，我觉得很适合辅助入门者进行代码的学习，但是复杂一点的问题它就没办法解决了。 不管是用YouTube、Google、StackOverflow、GitHub，还是ChatGPT辅助编码，问问题的能力永远比答案更重要，所以搜索引擎是一种工具。这些工具的诞生能够将简单的、重复性的工作解决掉，所以不愿意终身学习的躺平er们要小心了，在不久的将来，可能就要被代替掉了。 Hexo插入图片遇到的坑参考 hexo3 - hexo图片路径问题 - SegmentFault 思否 域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg · Issue #47 · xcodebuild/hexo-asset-image (github.com) 直接卸载hexo-asset-image插件 1npm uninstall hexo-asset-image --save 将_config.yml中 1post_asset_folder: true md文件中引用格式为 1![](同名文章assetfoldername/imagename.png) 基于Icarus的一些个人博客： about - improveNPC的日志 (wxk.me) legendsmb Hexo Icarus主题配置完全手册 | 小贪心 (littlezero.top) 旺阳 (lqwang.net) 学习文档 文档 | Hexo Categories - Icarus (ppoffice.github.io) ppoffice/hexo-theme-icarus: A simple, delicate, and modern theme for the static site generator Hexo. (github.com)","link":"/2023/02/07/2302072205/"},{"title":"Util | Github教育认证以及Copilot使用","text":"下午浪费了一点时间踩坑，希望能够帮助到其他需要教育认证的朋友们~ Github教育认证 不要挂梯子，直接用Microsoft Edge打开GitHub Education，进行后续验证。 学信网下载学籍报告，用DeepL文档翻译把报告翻译成英文版，截图保存为jpg格式。 直接上传图像，proof选择Other，填Ministry of Education Online Verification Report of Student Status 刚开始上传会提示profile问题、没有valid date问题等。我还把Github profile重新改了一遍，但这不是问题的关键。主要问题还是上传的学籍报告不是英文版or不清晰，之前用的是Google的文档翻译，翻译出来的字很小，再转成JPEG压缩了一下很模糊。 Copilot使用 有了教育认证，就可以免费用GitHub Copilot · Your AI pair programmer啦。每个月省了10刀~ 在pycharm中添加插件即可。 123写注释，copilot会自动补全相应的注释和代码。- tab键应用suggestion（将自动补全的代码，或者根据注释补全的代码应用）- alt+[或alt+]可以查看其他的suggestion 再安利两个我超级喜欢的插件 12一个是Indent Rainbow，彩虹缩进🌈，写python超级好用啊！另外一个是Monokai Pro Theme，我最喜欢的代码配色就是Monokai了！ 使用体验： 和ChatGPT相比，Copilot可能更方便辅助日常中的代码构建（尤其是常写的代码，Copilot可以直接内嵌在IDE中，补全代码），可以提高程序员的编码效率~ 但是如果要解决实际场景下的编程问题，而不是一些基础的Leetcode算法题或者教学Case，ChatGPT和Copilot都只是一种辅助工具 距离取代程序员还有很远的距离呢~","link":"/2023/02/15/2302151930/"},{"title":"Paper | SFI-Swin Symmetric Face Inpainting with Swin Transformer by Distinctly Learning Face Components Distributions | arXiv2023","text":"Info Title：SFI-Swin: Symmetric Face Inpainting with Swin Transformer by Distinctly Learning Face Components Distributions Keyword：Face Inpainting、Swin Transformer Idea：Symmetric（对称的，人脸对称性）、Distinctly Learning Face Components Distributions（显式学习面部组件分布） Source Paper，2023年1月9号Submitted到arxiv上的。[2301.03130] SFI-Swin: Symmetric Face Inpainting with Swin Transformer by Distinctly Learning Face Components Distributions (arxiv.org) Code，Repo给出了但是代码还没有push上来。mohammadrezanaderi4/SFI-Swin: SFI-Swin: Symmetric Face Inpainting with Swin Transformer by Distinctly Learning Face Components Distributions https://arxiv.org/abs/2301.03130 (github.com) 日常感叹，为什么我能想到的Idea别人总能如此之快的抢发。当我还在拖拖拉拉实现Idea，别人已经验证完了。要多读paper，更重要的是多写code，实现Idea并验证哇。世界上最遥远的距离就是知道和做到。 Abstract现存的问题（问题陈述）： None of the existing inpainting methods consider the symmetry and homogeneity of the picture. 现有的方法在人脸修复的过程中没有考虑图像的对称性和同质性。 The metrics that assess a repaired face image quality cannot measure the preservation of symmetry between the rebuilt and existing parts of a face. 现有的评估指标无法衡量修复人脸的对称性。 提出的方法（贡献点）： 利用多discriminators分别验证五官的生成质量（提升对人脸高级语义五官的理解），构建一个transformer-based的网络（大感受野能够保证面部对称性）。 提出symmetry concentration score指标，来评估修复人脸的对称性。 在reality, symmetry, and homogeneity三个维度上，比最近提出的sota算法效果好。 Introduction 在图像处理中，同质性指的是测量图像的局部均匀性。 文章中的同质性指的是修复的缺失区域需要和面部的其他区域保持协调（global features of each part of the face）。The inpainted regions must be homogeneous with the other parts of the face and highly correlated to the available surrounding areas of the input image. 对称性指的是面部的左右对称。facial symmetry must be preserved between the left and right sides. 作者认为现存方法的问题出在了损失函数无法向生成器传达面部特征的整体理解。This shortcoming is because the network losses do not convey a general understanding of the facial features to the generator. 于是作者分析了主流Inpainting方法常用的几种loss对于模型训练的影响，包括pixel-wise, adversarial, feature-matching, and perceptual loss。 pixel-wise loss。L1、L2范数，只能让网络理解到底层特征（low-level features）。👉focus on 底层特征（颜色、纹理） adversarial loss。能够让gt和生成图像的分布（distribution）接近，使用discriminator和generator构成博弈；feature-matching loss。gt和pred作为输入，提取discriminator中间层特征。这两个loss只能让生成的图片看起来真实，但不能保证missing regions exactly similar to ground truth（inpainting任务的不适定性，ill-posed problem），大多数鉴别器是patch-based的，所以只能保证局部真实感。👉focus on 生成patches内容的真实感 perceptual loss。先利用一个seg network的预训练提取高级语义特征，然后计算L1、L2范数。主要考虑了high-level features，比如边缘。👉focus on 边缘轮廓的平滑性 一般是过一个类似VGG的backbone预训练提取特征，high-level features就默认为语义及以上层次的特征。 有时上述的loss会牺牲面部对称性而达到局部真实感的最优，所以我们现在需要💡homogeneity-aware loss均匀感知损失，来约束模型。同时，transformer的大感受野也能保证面部对称性。 Method Evaluation 方法效果一般，更多的是Swin transformer带来的加成。","link":"/2023/02/23/2302232150/"},{"title":"Backend | 关于Node.js、NPM和Node_modules","text":"是什么首先看了一下Node.js官网的介绍。 As an asynchronous event-driven JavaScript runtime, Node.js is designed to build scalable network applications. 说的都是什么鬼话，一句没看明白。让我们来看看人话是什么样的。 Node.js, which is a run-time environment that includes everything required to execute a program written in JavaScript. Node.js is neither a programming language nor a framework; it’s an environment for them. Node.js是用JavaScript写程序时的一个运行时环境。 NPM is Node.js’s package ecosystem. It is the largest ecosystem of all open-source libraries in the world, with over 1 million packages and growing. NPM is free to use, and thousands of open source developers contribute to it daily. NPM是Node.js的包生态系统，也就是管理package的。这是世界上最大的一个开源库生态，据说每天都会有200多个新的package被注册。 根据项目中的package.json或package-lock.json文件，利用npm install就可以安装项目所有的依赖库，并存储在node_modules下。 与Python库管理的区别 npm vs. pip npm使用的是局部依赖，所以相同的module会被反复安装到每个项目以及每个可传递的依赖项上（ The same module is installed over and over again for every project and every transitive dependency）。一个package可以是一个tar包，也可以是本地file协议，甚至git仓库地址。所以，node_module——HEAVIEST OBJECTS IN THE UNIVERSE。 12345678910node_modules mod-a node_modules mod-b@1.0 mod-c node_modules mod-b@2.0 mod-d node-modules mod-b@2.0 虽然mod-c和mod-b依赖同一个mod-b版本，但是该版本却安装了两遍。如果应用了很多第三方库，同时第三方库依赖了一些很基础的第三方库（如lodash），node_modules里就会充满各种重复版本的lodash。 而pip使用的全局依赖（至少对于虚拟环境而言是全局依赖的），所以就避免了上述问题。 standard library python vs. JS Python的标准库比较大，与JS的标准库相比。 所以JS会依赖更多的packages。 我觉得可以把node.js类比于anaconda，都像环境和容器一样。 ICARUS的npm版本和git版本首先我的blog是基于hexo的。 因为有两个版本可以安装，npm install下来的就是直接到node_modules里，其实就是github repo的一个注册包版本（node_modules/hexo-theme-icarus包含package.json，所以它是一个package而不是一个module？不过我的觉得package和module的区分不重要）。 而git clone安装方法是存在themes文件夹下面。 如果我想修改一些主页的设置，就需要改主题的源代码，但是他是以npm的方式安装的，虽然直接修改也能生效（因为是本地路径查询包，所以直接修改node_modules中的库也是没问题的吧？），但是这种方法十分的不优雅（比如某天重新装了一下node_modules就全G了）。 推荐的方法是利用git clone安装到theme文件下，也就是自己的项目里，然后修改好了闲的没事的话可以注册到npm上，这样别人也能使用你修改后的icarus plus版本了，而且npm直接安装一下，十分的方便。","link":"/2023/02/24/2302241356/"},{"title":"Paper | Resolution-robust Large Mask Inpainting with Fourier Convolutions | WACV2022","text":"Info Title： Resolution-robust Large Mask Inpainting with Fourier Convolutions Keyword：Large Mask Inapinting Idea：Fourier Convolutions Source Paper，2021年9月15日submitted的。最后发表在WACV2022上，确实是Applications of CV，非常实用。后续有很多CVPR2022的高分辨率图像修复任务都和这篇工作做了对比。[2109.07161] Resolution-robust Large Mask Inpainting with Fourier Convolutions (arxiv.org) Code，大分辨率图像修复效果非常好的一项工作，面向落地的。https://github.com/saic-mdal/lama，[Resolution-robust Large Mask Inpainting with Fourier Convolutions (advimman.github.io)](https://advimman.github.io/lama-project/) Vedio，超棒的一个paper讲解，非作者本人，但是邀请了一作来interview。Resolution-robust Large Mask Inpainting with Fourier Convolutions (w/ Author Interview) - YouTube Abstract现存的问题： Modern image inpainting systems, often struggle with large missing areas, complex geometric structures, and high-resolution images. 目前图像修复存在的问题有：大缺失区域（但个人认为ill-posed problem不是傅里叶卷积能够解决的）、复杂几何结构以及高分辨率图像修复。 猜想： 如何解决这个问题？作者认为最主要的原因是lack of an effective receptive field in both the inpainting network and the loss function. 本文LaMa（Large mask inpainting）贡献点： 在网络结构上，使用fast Fourier convolutions的inpainting network architecture，image-wide的感受野（快速傅里叶卷积的贡献）。 在损失函数上，A high receptive field perceptual loss。 在训练策略上，使用Large training mask。 IntroductionA large effective receptive field is essential for understanding the global structure of an image. 第一， high receptive field architecture。文章提出了基于快速傅里叶卷积（FFCs）的网络架构，能够使得网络前几层感受野都能cover整个图像。可以提升perceptual quality并使网络轻量化，而且泛化能力很强（即使训练集不包含的高分辨率图像，也能很好的推理）。 第二， high receptive field loss function。文章提出基于语义分割网络、大感受野的perceptual loss。能够提升全局结构和形状的一致性。 第三，aggressive algorithm of training masks generation。training mask generation，生成更大的mask。 Method大mask配置下，如果依旧利用传统的3×3ResNet卷积核，在网络前期感受野可能位于掩膜内部，所以网络中的许多层都缺乏全局上下文，浪费了计算量和参数。 Add FFC 而Fast Fourier convolution (FFC) 能够让网络前几层应用全局的上下文信息。包含两个并行分支，1）局部分支使用常规的卷积操作；2）全局分支使用real FFT，作用在实数信号上。FFT会转换到复数空间（频域）。而inverse real FFT能够保证输出是实数。 这里简单的real FFT得到的复数实部和虚部concat到了一起，然后在频域上做了一个1×1卷积，也就是同频分量的卷积，这样能保证周期性信号的修复（也就是重复性的pattern，作者最初的motivation就是认为现有的方法对于重复性pattern修复的结果不佳，想到重复pattern就想到了周期性信号，也就使用了FFT来解决这个问题） 提出了一个Fast Fourier Conv Residual Block，也就是res block改成快速傅里叶卷积。FFC还有局部分支和全局分支的交互，作用在每一个层之间。 Perceptual loss pro 在鉴别器部分，使用segmentation model作为backbone来专注于high-level information，而不是classification model backbone，更专注于纹理等低级特征。使用傅里叶或扩张卷积来实现均可。 这里做了消融实验验证了对于perceptual loss升级后的效果。因为生成器更关注于全局信息，所以也要使判别器的性能提升，这样在GAN的训练过程中才能保持平衡。 Generation of large mask 输入的数据对于模型的性能提升很重要。与deepfillv2和narrow mask相比，文章生成large wide mask（多边形宽笔划）和large box mask的组合，作为训练输入。 Evaluation 红色代表本方法比其他方法性能提升的百分比。可以看出在narrow mask配置下，本文方法超过绝大多数method，但是在wide mask配置下，性能吊打其他方法。 使用傅里叶卷积的消融实验，在narrow mask下傅里叶卷积模型的性能提升效果不是很明显，但是大mask配置下优势就很突出。 还可以泛化到高分辨率图像上。","link":"/2023/02/26/2302262250/"},{"title":"Issues | Baseline MISF-CVPR2022 Reprod &amp; GIQA improve","text":"Official code：tsingqguo/misf (github.com) 关于loss参数1[('epoch', 1), ('iter', 1), ('l_d2', 0.707538366317749), ('l_g2', 0.07427514344453812), ('l_l1', 0.7772688865661621), ('l_per', 0.20167401432991028), ('l_sty', 0.393798291683197)] 1234567logs = [ (&quot;l_d2&quot;, dis_loss.item()), (&quot;l_g2&quot;, gen_gan_loss.item()), (&quot;l_l1&quot;, gen_l1_loss.item()), (&quot;l_per&quot;, gen_content_loss.item()), (&quot;l_sty&quot;, gen_style_loss.item()), ] 其中，l_d2是Inpainting Model的Discriminator loss，l_g2是Inpainting Model的Generator loss，l_l1是L1 loss，l_per是Perceptual loss，l_sty是Style loss。 这篇文章作者的code是基于Edge Connect的代码Repo的，原模型Edge Connect分为了Edge model、Inpainting Model、Inpaint with Edge Model以及Joint Model四个训练阶段，这里MISF的作者应该是只用了Inainting Model的部分并进行了修改。 wandb使用123456789101112import wandb # 使wandb库在pytorch库之后引用default_config = dict( batch_size=128, dropout=0.5)wandb.init(project=&quot;pj-name&quot;, config=default_config, mode=&quot;online/offline/disabled&quot;)batch_size = wandb.config.batch_size # 保证代码可读性和一致性wandb.log({'epoch': epoch, 'loss': loss, 'accuracy': accuracy}) Package importsys.path指定模块搜索路径的列表。默认情况下，python导入文件或者模块，会在sys.path里找模块的路径。如果路径下搜索不到模块的话，就会报错。 123import sysprint(sys.path)sys.path.append('/home/nsy/nlp') # package路径为/home/nsy/nlp/new_package 1['/home/user5/code/misf-main', '/home/user5/.pycharm_helpers/pydev', '/home/user5/code/misf-main', '/home/user5/.pycharm_helpers/pycharm_display', '/home/user5/.pycharm_helpers/third_party/thriftpy', '/home/user5/.pycharm_helpers/pydev', '/home/user5/code/misf-main/C', '/Users/75796/AppData/Local/JetBrains/PyCharm2021.3/cythonExtensions', '/home/user5/anaconda3/envs/testenv/lib/python38.zip', '/home/user5/anaconda3/envs/testenv/lib/python3.8', '/home/user5/anaconda3/envs/testenv/lib/python3.8/lib-dynload', '/home/user5/.local/lib/python3.8/site-packages', '/home/user5/code/PUT-main', '/home/user5/anaconda3/envs/testenv/lib/python3.8/site-packages', '/home/user5/.pycharm_helpers/pycharm_matplotlib_backend'] 后台训练1nohup python -u main.py &gt;02272115_loss.log 2&gt;&amp;1 &amp; GIQA升级版FIQA Best model？ 12- checkpoints/acc01090300/model_best.pth.tar- /home/user5/code/QA/GIQA-master/MBC-GIQA/checkpoints/acc01090300/model_best.pth.tar Freeze pretrained layer (29 封私信 / 7 条消息) Pytorch 如何精确的冻结我想冻结的预训练模型的某一层，有什么命令吗？ - 知乎 (zhihu.com) 算法工程师升级打怪 成为一个算法工程师首先你得有工程能力，就是说你得先能干活，熟练的掌握一门编程语言必不可少； 然后是相关领域的专业知识，比如推荐算法，你需要了解常见推荐算法的原理、优缺点、应用场景等； 然后是机器学习的基础知识，李航的《统计机器学习》，周志华的《机器学习》，Benjio的《深度学习》，这三本书至少得过个那么一两遍吧，把基础知识掌握牢了再学习其它的就容易多了，基础不牢地动山摇； 然后是掌握一些数据结构和算法知识，这个还是比较重要的，对你写出高效的代码很有帮助。","link":"/2023/02/28/2302281930/"},{"title":"Paper | Incremental Transformer Structure Enhanced Image Inpainting with Masking Positional Encoding | CVPR2022","text":"Info Title： Incremental Transformer Structure Enhanced Image Inpainting with Masking Positional Encoding Keyword：Transformer, High resolution Image Inpainting Idea：Extract edges and contours with Transformer, Masking Positional Encoding Source Paper，2022年3月submitted的，到现在已经一年过去了，accepted in CVPR2022。[2203.00867] Incremental Transformer Structure Enhanced Image Inpainting with Masking Positional Encoding (arxiv.org) Code，基于LaMa做的一些小改进。DQiaole/ZITS_inpainting: Incremental Transformer Structure Enhanced Image Inpainting with Masking Positional Encoding (CVPR2022) (github.com)，Incremental Transformer Structure Enhanced Image Inpainting with Masking Positional Encoding (dqiaole.github.io) PaperReading，CVPR2022|基于Transformer结构增强的增量式图像修复|ZITS - 知乎 (zhihu.com)非常好的阅读笔记。 Abstract v1本文是基于WACV’22的高分辨率图像修复工作LaMa进一步改进的，更偏向于自然场景的修复（更注重结构、轮廓的先验信息）。 现存的问题： 1）现有的方法受限于CNN有限的感受野，只能处理常规的纹理，仍存在恢复生动纹理与合理的整体结构的问题（Vivid textures and Reasonable structures）。 2）Attention-based模型（Transformer）虽然能更好的学习长距离依赖（Long-range dependency），但是受限于高分辨率图像推理时的Heavy Computation。 解决的方法（贡献）： 1）【主要贡献】An additional structure restorer，增加一个额外的结构修复器，增量式的辅助图像修复。 在固定的低分辨率Sketch space（Gray-scale space）修复整体的结构，并可以通过上采样融入到修复过程中。 Can be integrated with other pretrained inpainting models efficiently with the zero-initialized residual addition（无需额外训练，直接融入到其他Inpainting预训练模型中）。 2）Masking positional encoding strategy用于提升使用Large irregular mask训练的性能。 Abstract v2现存的问题： 现有的Inpainting方法只能处理regular textures，由于CNN感受野有限的问题，失去了对于图像整体结构（Holistic Structure）的把控。 基于attention的方法可以一定程度上解决该问题，但受限于高分辨率图像推理时的Heavy Computation。 贡献： Motivation：对于高分辨率自然图像修复来说，边缘信息十分重要，如果没有对于大图像的整体理解，很难恢复场景的边缘和线条，尤其是纹理较弱的场景。Method：使用一个额外的结构恢复网络，增量式的辅助图像修复过程。具体而言：transformer-based网络，在固定的低分辨率草图空间中，修复图像的边缘和轮廓线条，而后上采样到高分辨率，融合到后续图像修复网络中。 Zero-initialized Residual Addition（零初始化残差融合）增量训练策略：提出的方法可以和其他的pretrained inpainting model轻易的整合在一起（许多其他利用先验信息的方法通常是多阶段多模型，训练成本高，而这个策略可以在较少的step数中快速收敛）。 提出了一个Masking Positional Encoding Strategy，提升在大mask配置下的模型性能。（高分辨率、较大缺失区域的修复，模型前期会在mask区域重复产生没有语义的伪影，浪费计算量） Introduction Image Inpainting Goal：The inpainted images should remain both semantically coherent textures and visually reasonable structures. 这里也给了我们一点点启发，对于人脸修复而言，语义一致性至关重要，所以利用语义分割信息来引导人脸修复是一个好的想法；而后者，整体结构的连贯性，则对于自然场景图像修复至关重要。 Image Inpainting任务现存的问题 1）Limited receptive fields。面对large corrupted region和高分辨率图像时问题更加凸显。 2）Missing holistic structures。缺乏整体结构，Recovering key edges and lines for scenes。 3） Heavy computations。训练高分辨率图像的GAN非常tricky and costly。 4） No positional information in masked regions。在大mask配置下，模型会生成没有意义伪影，浪费计算量。 很好，我的另一个Idea别人也已经实现了，好好看好好学吧(●’◡’●) 作者分析了LaMa的不足之处（其实非常明显），LaMa的本质是在频域内做了1×1卷积保证了相同周期性信号的关联，也就是LaMa作者想要解决的重复性纹理的修复。但是这样的方法无法确保整体结构，并且在纹理较弱的图像上性能很差。 最先使用transformer-based做low-resolution图像修复，然后再CNN上采样超分一下的工作。 Ziyu Wan, Jingbo Zhang, Dongdong Chen, and Jing Liao. High-fidelity pluralistic image completion with transformers. arXiv preprint arXiv:2103.14031, 2021. Yingchen Yu, Fangneng Zhan, Rongliang Wu, Jianxiong Pan, Kaiwen Cui, Shijian Lu, Feiying Ma, Xuansong Xie, and Chunyan Miao. Diverse image inpainting with bidirectional and autoregressive transformers. arXiv preprint arXiv:2104.12335, 2021. 还有许多使用先验信息的网络，但通常都是多阶段图像修复，训练成本较高（trained from scratch）。 Method 首先将mask、masked image（valid pixel为1，待填充区域为0，mask可视化时反转一下，待填充变为1，都是为了方便后续计算）、canny边缘提取器获得的masked edge（边缘）以及利用作者之前提出的模型获取的masked lines（线框，主要是建模两点之间的连线，所以上采样下采样时不存在歧义，但是canny边缘提取出来的信息在不同feature size提取出的边缘可能不同）。 送入TSR，首先将256×256的图片下采样三次到32×32大小，然后利用基于轴向注意力和常规注意力的transformer，减少计算量提升计算效率，最后获得256×256的修复后的边缘和线框。后续利用一个简单的四层CNN网络来对于修复好的先验信息进行上采样，只用线框数据进行训练而不用线框加边缘数据，这样做能够更好的消除歧义，获得不同分辨率更加一致的先验信息。 因为边缘和线框信息是稀疏的，所以利用基于门控卷积的网络来提取更关键的信息，并采用多尺度信息，也就是中间block的最后一层和上采样的三层，通过零初始化残差融合（就是做了一个简单的残差运算），和baseline LaMa的前四层融合在一起，然后训练50k进行一个增量学习微调就能显著的提升原模型的效果。 至于MPE（Masking Positional Encoding），其实就是取一个3×3的all-one卷积核来和mask区域做计算，能够获得距离大mask中心的距离信息以及mask方向信息，送入到baseline网络中作为辅助信息。（黑色区域为1白色为0，很简单的卷积运算）。 Evaluation 主要针对自然场景图像修复，定性上的性能增益不是很明显。 MPE这个方法更是鸡肋，出发点很好但是做的太简单了，所以也没有多高的性能增益。 但是定性效果很好，主要是整体结构信息（边缘和线框）对于高分辨率的自然场景图像来说是非常关键的信息。作者之前提出的提取线框的模型，我觉得底层逻辑就像是透视图，对于空间布局来说，透视图很重要，所以修复出来的图片效果会更好。","link":"/2023/03/05/2303051650/"},{"title":"Paper | ZITS++ Image Inpainting by Improving the Incremental Transformer on Structural Priors | arXiv2023","text":"Info Title： ZITS++: Image Inpainting by Improving the Incremental Transformer on Structural Priors Keyword：Transformer, High resolution Image Inpainting Idea：之前CVPR2022会议文章的期刊版本，做了一些小改进和其他的尝试。 Source Paper，2022年10月第一版，2023年2月23日第二版（新鲜出炉的）。2210.05950] ZITS++: Image Inpainting by Improving the Incremental Transformer on Structural Priors (arxiv.org) Code，DQiaole/ZITS_inpainting: Incremental Transformer Structure Enhanced Image Inpainting with Masking Positional Encoding (CVPR2022) (github.com)，Incremental Transformer Structure Enhanced Image Inpainting with Masking Positional Encoding (dqiaole.github.io) AbstractZITS存在的问题： ZITS中使用的canny边缘不能区分有意义的结构。在复杂环境中Canny边缘产生confusing textures而不是具有丰富信息的底层结构。 深入研究不同的图像先验信息引导的高分辨率图像修复是必要的。 提升LaMa的纹理修复性能。 贡献点： 在原始的ZITS上（transformer-based的边缘和线框补充），又加入了许多不同先验的实验分析和讨论，最终发现L-Edges、线框和梯度先验结合效果最好。 将补全好的先验信息融合到修复网络中需要上采样，提出了一种Edge Non-Maximum Suppression（E-NMS），将冗余的边缘信息过滤掉（消除边界附近的模糊边缘）。 对于LaMa进行修改，加入了Large Kernel Attention以及修改模型设计。（增益：large receptive fields and scale invariance尺度不变性。we promote the maxpool as the mask resizing strategy of PatchGAN instead of the nearest in LaMa） 提供了一个高分辨率图像数据集，HR-Flickr。 Method 提出了learning-based边缘CATS取代原来用的canny边缘。并利用E-NMS（现有的算法）过滤不确定的边缘。最终使用的先验是CAT+线框（wireframe）+梯度。 利用扩张卷积分解large Kernel，实验中取K=21。 mask resize策略：maxpool取代nearest resize（稳定训练过程） Evalutaion 定量性能提升明显。 定量效果也很好。 人脸修复效果也很好。","link":"/2023/03/05/2303052040/"},{"title":"Growth | Steve Jobs —— Follow your heart and intuition, everything else is secondary","text":"Extraverted iNtuition Thinking Judgment Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary. SpeechYou’ve got to find what you love. I am honored to be with you today at your commencement from one of the finest universities in the world. I never graduated from college. Truth be told, this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories. The first story is about connecting the dots.I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out? It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl. So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him?” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would someday go to college. And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out. And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked interesting. It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the five-cent deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example: Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this. I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating. None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts. And since Windows just copied the Mac, it’s likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later. Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever, because believing that the dots that will connect down the road will give you the confidence to follow your heart, even when it leads you off the well-worn path, and that will make all the difference. My second story is about love and loss.I was lucky – I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a $2 billion company with over 4000 employees. We had just released our finest creation - the Macintosh - a year earlier, and I had just turned 30. And then I got fired. How can you get fired from a company you started? Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating. I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly. I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me – I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over. I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life. During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world. In a remarkable turn of events, Apple bought NeXT, I retuned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together. I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle. My third story is about death.When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today?” And whenever the answer has been “No” for too many days in a row, I know I need to change something. Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything – all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart. About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes. I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form. of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now. This was the closest I’ve been to facing death, and I hope it’s the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept: No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true. Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary. When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions. Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you. Stay Hungry. Stay Foolish. Thank you all very much.","link":"/2021/12/12/211212/"},{"title":"Util | 关于好用的Linux shell命令","text":"1. ls命令查看文件数目123456- 查看当前目录下的文件数量（不包含子目录中的文件）ls -l|grep &quot;^-&quot;| wc -l- 查看当前目录下的文件数量（包含子目录中的文件）ls -lR | grep &quot;^-&quot;| wc -l- 查看当前目录下的文件夹目录个数（不包含子目录中的目录）ls -l | grep &quot;^d&quot;| wc -l 2. df/du查看磁盘/文件所占空间大小123456- 查看磁盘空间利用情况df -hl- 查看子文件夹所占磁盘空间大小du -h --max-depth=1 work/testing(filename)- 查看某个文件的大小du -shl 1.tar.gz 3. nohup实现后台训练12345678- nohup后台任务：nohup + command + &amp;，当前路径产生日志文件nohup.out nohup bash scripts/run_inpaint_sa.sh &amp;- nohup后台任务，日志重定向到filename.txtnohup bash scripts/run_inpaint_sa.sh &gt; filename.txt 2&gt;&amp;1 &amp;- python脚本需要加一个 -unohup python -u main.py &gt;ans.log 2&gt;&amp;1 &amp;或log = logging.getLogger() #日志输出中间值 4. zip/unzip命令 zip 1234- 之前用ssh传文件常用，先压缩再传文件是个好习惯zip -q -r gconvcode.zip(压缩后的文件名) Gated_conv(待压缩文件)- 解压unzip filename.zip tar 12345- 多个文件压缩打包 tar czvf my.tar.gz file1 file2,...（file*）（也可以给file*文件mv 某目录 再压缩）- 解压tar -xvf file.tar 解压 tar包tar -xzvf file.tar.gz 解压tar.gz 7zip 1234- 安装7zip 需要root权限sudo apt update &amp;&amp; sudo apt install --assume-yes p7zip-full #Ubuntu and Debian7z x filename.7z7z --help 5. 学会写shell脚本1234- 利用 \\ 进行换行，脚本易读- 运行shell脚本bash scripts/run_inpaint_sa.sh(script name)更好的方法是将能改的参数全部写进配置文件中（cfg, yml），便于记录训练参数~ 批量移动多个子文件内的文件到同一个文件夹中（数据集整理）123456#!/bin/bashfor var in $(find ./ -name *.jpg);docp -vf $var ./image/;done- 该脚本移动了文件夹内所有以jpg结尾的图片到image目录下。 6. Tips 学会整理数据集把所有常用数据集整理在同一个文件夹下，并挂载在一个空间大的硬盘上。训练中间生成数据也一样，进行整理。 利用软链接使用数据集ln -s [源文件或目录] [目标文件或目录]例： 删除软链接rm -rf filename 注意，在打包代码的时候如果目录下有数据集的软链接，（zip）会一同打包，整理code的时候记得把该删的东西都删了。。（不要问我怎么想到这一点的） 7.ssh传输数据（scp，服务器ip）1scp -P 端口号 -r 文件名 远程服务器用户名@xxx.xx.xx.xxx服务器ip:/home/fengtl/BlindInpainting/vcnet服务器端路径","link":"/2022/10/23/221023/"},{"title":"Util | Git使用小结","text":"从今天开始正式使用git，记录每日代码量，早日成为5w行入门码农。Talk is cheap. Show me the code. 1 Git 提交代码123451. git status # 查看当前状态、文件修改状态（红字）2. git add . or git add &lt;xxx（文件路径+文件名）&gt; # 添加内容到本地git缓存区3. git commit -m &quot;&lt;备注&gt;&quot; # 推送修改到本地git库4. git pull &lt;远程主机名&gt;&lt;远程分支名&gt; # 取回远程主机某个分支的更新，与本地指定分支合并5. git push &lt;远程主机名&gt;&lt;远程分支名&gt; # 本地仓库代码推送到远程主机的某个远程分支上 2 Git 代码管理 个人代码量统计 全部时间1git log --author=&quot;&lt;username&gt;&quot; --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf &quot;added lines: %s, removed lines: %s, total lines: %s\\n&quot;, add, subs, loc }' - 指定时间段12git log --since=&quot;&lt;start date e.g.2020-01-01&gt;&quot; --before=&quot;&lt;end date e.g.2020-12-31&gt;&quot; --author=&quot;&lt;username&gt;&quot; \\--pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf &quot;新增行数: %s, 移除行数: %s, 总行数: %s\\n&quot;, add, subs, loc }'","link":"/2023/01/04/230104/"},{"title":"Frontend | Icarus主题美化","text":"为博客添加nest动态线条特效 在themes\\icarus\\layout\\layout.jsx的body中添加如下代码，CDN可根据自己使用的修改。 1&lt;script type=&quot;text/javascript&quot; color=&quot;30,144,255&quot; opacity='0.5' zIndex=&quot;-1&quot; count=&quot;150&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt; 除了通过CDN加载，也可以下载到本地使用，详见官方文档。 1color=&quot;255,255,255&quot; opacity='0.7' # 改成了自己喜欢的颜色 Code Highlight 可以从这些code highlight中找自己喜欢的styles。highlight.js/src/styles at 9.18.1 · highlightjs/highlight.js (github.com) 12345678910article: # Code highlight settings highlight: # Code highlight themes # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: xt256 # 赛博朋克主题的暗黑code highlight # Show copy code button clipboard: true # Default folding status of the code blocks. Can be &quot;&quot;, &quot;folded&quot;, &quot;unfolded&quot; fold: unfolded 我的最爱：monokai References icarus个性化配置 - Hongjie’s blog (anticme.com)","link":"/2023/03/07/2303072103/"},{"title":"Paper | Visual ChatGPT Talking, Drawing and Editing with Visual Foundation Models | arXiv2023","text":"Info Title： Visual ChatGPT: Talking, Drawing and Editing with Visual Foundation Models Keyword：Large Language Model（LLM），Visual Foundation Model（VFM） Idea：Prompt Engineering Source Paper，2023年3月8日ArXiv Submitted，微软亚洲研究院的一项新工作。2303.04671] Visual ChatGPT: Talking, Drawing and Editing with Visual Foundation Models (arxiv.org) Code，刚发布几天，目前已经有1万多标星了。microsoft/visual-chatgpt: VisualChatGPT (github.com) Abstract存在的问题： 大型语言模型如ChatGPT利用单一语言模态训练，因此处理视觉信息的能力非常有限。 相比较而言，视觉基础模型（VFM，Visual Foundation Models）在计算机视觉方面潜力巨大，因而能够理解和生成复杂的图像（如ViT、BLIP、Stable Diffusion等等）。VFM模型对输入-输出格式的苛求和固定限制，使得其在人机交互方面不如会话语言模型灵活。 贡献： Prompt Engineering：将ChatGPT和多个SOTA视觉基础模型连接。 Method没有任何的训练，系统构成： Part 1 ChatGPT（直接利用大语言集成工具LangChain，调用OpenAI text-davinci-003 version） Part 2 PromptManager 构造了一个巨大的Prompt，把系统规则、视觉基础模型调用、历史对话、用户query、历史推理、中间结果都包含，简单来说就是指导ChatGPT怎么调用模型，什么时候调用，怎么处理结果。ChatGPT和VFMs之间沟通提到图片的时候使用的是随机生成的uuid（universally unique identifier），两者之间是没有向量或者图片数据交互的。 Part 3 VFMs（22个训练好的SOTA视觉基础模型，直接调用，利用4张V100就能全部部署） Result 不是真正的多模态大模型，不过是普通玩家（小公司）可以尝试的Prompt Engineering。 训练一个多任务的large-scale视觉-语言模型应该非常消耗算力吧，23年3月15日发布的gpt4虽然没有公开详细的技术细节，但我觉得底层加了Vision QA，也就是Image-to-Text的能力，还是很难将I2I，T2I，I2T完全结合再一起的。 不过大力出奇迹，stack more layers，feed more data。 猜测GPT4背后的一些图像能力是靠这样的简单逻辑实现的。 References 视觉ChatGPT来了，微软发布，代码已开源 - 热点 - 科研解读 - AMiner visual-chatgpt: 训什么练，我直接prompt一把梭 - 知乎 (zhihu.com)","link":"/2023/03/14/2303142003/"},{"title":"Trend | GPT-4 —— The winner takes all","text":"Image and Text Multimodal We report the development of GPT-4, a large-scale, multimodal model which can accept image and text inputs and produce text outputs. 模型底层逻辑还是image+text input（融入多模态元素，更唬人一些？），但还是文本outputs（不过听说chatgpt plus版本已经可以有image output了，怀疑是一些命令的组合？就类似于上一篇微软刚提出的Vision Chatgpt的方式一样，将视觉模型作为tool模型，large-scale语言预训练作为agent模型）。 支持输入更多的tokens（更个性化，更方便定制了，更task-specific了） 加了一些VQA的性能对比。 Professional and Academic Benchmarks While less capable than humans in many real-world scenarios, GPT-4 exhibits human-level performance on various professional and academic benchmarks, including passing a simulated bar exam with a score around the top 10% of test takers. professional benchmarks 乱杀应试教育界，秒杀多少普通人。 AI for science提上日程吧，早日研究，然后自我替代（开玩笑，不过很期待这一天）。 这GRE、leetcode水平，感觉我自己都要花点时间才能达到呢。 academic benchmark 已经叫做benchmark-specific tuning了，面向任务的DL调参侠瑟瑟发抖。 Thinking 这个part让我觉得，训练一个大模型需要好多方面的协调，包括 Pretraining Compute cluster scaling Data Distributed training infrastructure Hardware correctness Optimization &amp; architecture Training run babysitting Long context Long context research Long context kernels Vision Architecture research Compute cluster scaling Distributed training infrastructure Hardware correctness Data Alignment data Training run babysitting Deployment &amp; post-training Reinforcement Learning &amp; Alignment Dataset contributions Data infrastructure ChatML format Model safety Refusals Foundational RLHF and InstructGPT work Flagship training runs Code capability Evaluation &amp; analysis OpenAI Evals library Model-graded evaluation infrastructure Acceleration forecasting ChatGPT evaluations Capability evaluations Coding evaluations Real-world use case evaluations Contamination investigations Instruction following and API evals Novel capability discovery Vision evaluations Economic impact evaluation Non-proliferation, international humanitarian law &amp; national security red teaming Overreliance analysis Privacy and PII evaluations Safety and policy evaluations OpenAI adversarial testers System card &amp; broader impacts analysis Deployment Inference research GPT-4 API &amp; ChatML deployment GPT-4 web experience Inference infrastructure Reliability engineering Trust &amp; safety engineering Trust &amp; safety monitoring and response Trust &amp; safety policy Deployment compute Product management Additional contributions Blog post &amp; paper content Communications Compute allocation support Contracting, revenue, pricing, &amp; finance support Launch partners &amp; product operations Legal Security &amp; privacy engineering System administration &amp; on-call support 比较费人的小部门就是data和training部分（标粗显示的部分），然后就是领域专家给反馈（adversarial testers）。 算法部分Pretraining+long context+Vision+RL，测试部署Evaluation+deployment，以及后期各种市场、产品，都缺一不可，都很关键啊。不过能看到AI产品能够有今天，也是十分欣慰了，以前的AI都停留在弱弱弱弱AI的层面吧，好处是觉得自己学的东西真的能改变世界，学科真的有技术爆炸式的飞跃进展，坏处是自己好像没什么用处了（美滋滋，不过发展的尽头，不都是要被替代的吗？语言、教育、设计、律师、计算机、金融各行各业，不论是专业性的，还是需要想象力的艺术生成，好像AI在某种程度上已经击败了90%的人类了吧）。 3年前的自己还很有信念的All in AI，坚信Deep Learning，距离通用AI的出现或许真的不远咯。 目前的AI变强了，但还是辅助人类办公，提升效率的帮手，距离完全代替人类还有很长的路要走（甚至真正的商业化都比较麻烦？）。愈发认为，人类的情感、情绪价值，在当下变得更为宝贵、更难以替代一些。 未来究竟是理性的胜利、还是感性的胜利，是机器的胜利、还是人类的胜利呢。如果有生之年能够见证的话，还挺让人期待的。 不过当下，打不过就加入嘛！ References GPT-4 (openai.com) GPT-4震撼发布：多模态大模型，直接升级ChatGPT、必应，开放API，游戏终结了？ (qq.com) gpt-4.pdf (openai.com)","link":"/2023/03/15/2303151651/"},{"title":"Growth | Be a Techno-Optimist","text":"All human progress is about overcoming an obstacle. From the wheel to the internet, we have discovered and invented our way out of all sorts of trouble. The story of science and technology is, in the main, one of making our lives easier. Instead of talking out of both sides of our mouths, perhaps it is time that we were appreciated just how much we need technology, and how far it has helped us along. That is exactly what philosopher John Danaher does in his recent paper, Techno-optimism: an Analysis, an Evaluation and a Modest Defense. Obviously, technology is not perfect. Smart phone addiction does exist, environmental destruction is happening, and we are each seeing a rapid, abrupt uprooting of how society has operated for millennia. If we say we’re “techno-optimists,” we are not saying that we are blind to technology’s problems. Optimism is not fanaticism. Instead, as Danaher argues, optimism is defined by three elements. First, optimists believe “the good prevails over the bad by some distance, with that distance varying depending on the strength of the optimistic stance.” So, in terms of technology, it means the good outweighs the bad. Second, optimism tends to associate with an “affirmation of improvement.” The year 2022 is a better time to live than 1880 — or even 1980. Third, optimists (and pessimists, for that matter) must believe that we can actually measure “good” as a value to track. We can point to this or that technology and say, “These are examples of good things that could only be caused by technological improvement.” According to Danaher, in order to properly justify and rationalize techno-optimism, we must do three things: Establish values, determine facts, and evaluate. Establish values. First, we must establish certain values as being “good.” For instance, a techno-optimist “might argue that it is wonderful that people have more disposable income and a richer set of consumer goods and services from which to choose.” Determine facts. Once we have established these values, then we have to present those facts that support the claim that technology provides them. Evaluate. We need to present the facts that defend values, but we also need to acknowledge facts that contradict those values as well. As mentioned above, technology does have its problems. It can impact our mental health, it ravages the environment, and it drastically upends what being human has always meant. The techno-optimist is the one who believes the good of technology outweighs the bad. There are two major critiques of techno-optimism that Danaher addresses. First, the “treadmill critique” argues that technology won’t constantly make the world better. We have become so accustomed to technology that we no longer appreciate it as “good” but rather expect it as the norm. Danaher counters by suggesting that there exists some “values that are not subject to baseline adaptation.” He cites “longer lives, fewer life-threatening illness, and more equality of opportunity” as examples of “goods” that will always be good, regardless of how accustomed we are to them. Second, the “unsustainability critique” is the idea that if “optimism depends on present or continued economic growth, it also depends on the continued technological exploitation of natural resources. All natural resources are finite and have some upper limit of exploitability.” Danaher’s response is that “technology is becoming less exploitative over time.” As a technology improves, then growth “decouples” from exploitation. You do not have to adopt a starry-eyed “technology-will-save-humanity” viewpoint to be a techno-optimist. It’s perfectly reasonable to suggest that there are many existing problems with technology, and that it, alone, is insufficient for good to prevail. Instead, we might sympathize with Danaher’s “modest techno-optimism.” According to this view, “we have the power to create the right institutions for generating, selecting, and creating material technologies, and acting on that belief in a cautious and sensible manner can make it more likely that the good will prevail over the bad.” It’s a kind of techno-optimism that perhaps needs a bit of human optimism, too.","link":"/2023/03/17/2303171405/"},{"title":"Paper | Spatially-Adaptive Pixelwise Networks for Fast Image Translation | CVPR2021","text":"Info Title： Spatially-Adaptive Pixelwise Networks for Fast Image Translation Keyword：Adaptive neural networks，Trainable efficient &amp; Gan-based I2I Trainable efficient image transformations：Computationally heavyinference is performed at extreme low-resolution, while thehigh-resolution synthesis is comparatively lightweight. 计算量大的推理在极低分辨率下执行，而高分辨率合成更轻量级。 Idea：Pixel-specific Lightweight MLPs Source Paper，2020年12月arXiv submitted，CVPR2021 accepted。Spatially-Adaptive Pixelwise Networks for Fast Image Translation (arxiv.org) Code，ASAPNet (tamarott.github.io) Abstract存在的问题： 现有的I2I方法随着性能的提升，推理时间也不断增加。 本文的贡献： 在不牺牲性能的同时，降低运行时间，提升推理速度。 Method 直觉上直接使用MLP预测效果会很差，文章提出了三个组件使网络表达能力增强。 Spatially-varying Parameters：与CNN的参数共享不同，本方法针对每个像素点的MLP参数是不同的（spatial-adaptive、spatial-varying）。逐像素预测可以并行计算，因为像素与像素之间独立，因此推理速度大幅度提升。 Sinusoid Positional Encoding：除了input pixel values以外，还将像素空间位置以不同频率的正弦信号编码，其频率高于上采样因子，以生成高频图像细节。 Input-adaptive Parameters：在低分辨率空间预测参数，对于每张图预测的逐像素MLPs参数均不同。 Evaluation 主打一个快，且性能没有显著下降。 MLPs一般只能学习到低频细节。在连续隐式表达中（神经渲染方向），MLPs表征能力不是很强，就像消融实验中的没有位置编码的模型生成结果一样。所以本文牺牲了极大的训练内存来换取速度。 Thinking 听师兄说，这是20年、21年CVPR比较热门的（灌水）方法。 后续会follow一篇在23年利用该方法发表（灌水）AAAI23的高分辨率图像修复方法。","link":"/2023/03/20/2303201917/"},{"title":"Paper | CoordFill, Efficient High-Resolution Image Inpainting via Parameterized Coordinate Querying | AAAI2023","text":"Info Title： CoordFill: Efficient High-Resolution Image Inpainting via Parameterized Coordinate Querying Keyword：Adaptive neural networks Idea：Parameterized Coordinate Querying Source Paper，2023年3月15号arXiv submitted，AAAI2023 accepted。CoordFill: Efficient High-Resolution Image Inpainting via Parameterized Coordinate Querying (arxiv.org) Code，作者还没更新repo。NiFangBaAGe (NiFangBaAGe) / Repositories (github.com) Abstract高分辨率图像修复现存的问题： 高分辨率图像需要较大的感受野，造成更多的计算量。 encoder-decoder架构会同时重建背景像素（非受损区域），作者认为这样会降低效率。 贡献点： 首次将continuous implicit representation引入高分辨率图像修复。 在Spatially-Adaptive Pixelwise Networks for Fast Image Translation (arxiv.org)的基础上，提出基于注意力快速傅里叶卷积（Attentional FFC）的参数生成网络。并且只针对掩膜区域进行重建。 Method 先将高分辨率图像（e.g. 1024×1024）双线性下采样到低分辨率空间（e.g. 256×256）。Encoder为三层卷积层，将输入图片特征继续下采样，然后利用六个基于注意力的傅里叶卷积块生成最终的逐像素MLPs参数。 利用一个简单的线性映射，只选取孔洞区域的映射，并将目标分辨率作为条件输入使网络能够对于分辨率敏感。最后利用最近邻插值将逐像素MLPs参数上采样到高分辨率空间，加入带有高频信息的正弦信号位置编码，仅生成代填补区域像素，最终直接贴回原图。 Evaluation 主打一个快，但是增益是之前CVPR21的I2I提出的，把该方法迁移到了Inpainting任务上而已。 可能对于高分辨率图像修复的实际应用部署会有很大的帮助。 在人脸图像上也做了实验，但是与HiFill保持训练一致，训练mask只采取了25%左右的缺失区域，很难认定这是高分辨率图像修复任务。 Thinking 灌水痕迹明显的一篇AAAI。 但可能是因为作者是工业界的，用了八卡a100训练这样的模型，方便实际中的高分辨率图像修复部署吧。科研上的价值不大。","link":"/2023/03/20/2303201927/"}],"tags":[{"name":"NLP","slug":"NLP","link":"/tags/NLP/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"paper","slug":"paper","link":"/tags/paper/"},{"name":"Growth","slug":"Growth","link":"/tags/Growth/"}],"categories":[{"name":"Util","slug":"Util","link":"/categories/Util/"},{"name":"Growth","slug":"Growth","link":"/categories/Growth/"}],"pages":[]}